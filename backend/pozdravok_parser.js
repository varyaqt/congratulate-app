const axios = require('axios');
const cheerio = require('cheerio');
const { MongoClient } = require('mongodb');
const { DateTime } = require('luxon');
const iconv = require('iconv-lite');

const client = new MongoClient("mongodb+srv://mi1en:1234@cluster0.qbxk9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0");
const db = client.db("congrats");
const collection = db.collection("congratulations");

const headers = {
    "User-Agent": "Mozilla/5.0",
    "Accept-Charset": "UTF-8"
};

const BASE_DOMAIN = "https://pozdravok.com";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: URL)
const CATEGORIES = {
    "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": "/pozdravleniya/den-rozhdeniya/",
    "–°–≤–∞–¥—å–±–∞": "/pozdravleniya/svadba/",
    "–ù–æ–≤—ã–π –≥–æ–¥": "/pozdravleniya/noviy-god/",
    "–Æ–±–∏–ª–µ–π": "/pozdravleniya/yubiley/"
};

async function parseCongratulations(category, subcategory, baseUrl, maxPages = 3) {
    for (let i = 1; i <= maxPages; i++) {
        const url = i === 1 ? baseUrl : `${baseUrl}${i}.htm`;
        console.log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

        try {
            const response = await axios.get(url, {
                headers,
                responseType: 'arraybuffer',
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                transformResponse: [data => data],
                params: {
                    // –ò—Å–∫–ª—é—á–∞–µ–º –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
                    gender: 'unisex'
                }
            });

            const html = iconv.decode(response.data, 'win1251');
            const $ = cheerio.load(html);

            // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏, –∏—Å–∫–ª—é—á–∞—è –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ
            const blocks = $("div.content p:not(.gender-specific)").filter((i, el) => {
                const text = $(el).text().trim();
                return text.length > 0 &&
                       !text.includes('–º—É–∂—á–∏–Ω') &&
                       !text.includes('–∂–µ–Ω—â–∏–Ω') &&
                       !text.includes('—é–Ω–æ—à') &&
                       !text.includes('–¥–µ–≤—É—à');
            });

            if (blocks.length === 0) {
                console.log("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
                break;
            }

            const promises = [];
            blocks.each((index, block) => {
                const text = $(block).text().trim()
                    .replace(/(\b–¥–ª—è\b|\b–º—É–∂—á–∏–Ω\b|\b–∂–µ–Ω—â–∏–Ω\b|\b–ø–∞—Ä–Ω—é\b|\b–¥–µ–≤—É—à–∫–µ\b)/gi, '')
                    .replace(/^\s*[-‚Äì]\s*/, '')
                    .trim();

                if (text && text.length > 20) { // –û—Ç—Å–µ–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
                    const doc = {
                        category: category,
                        subcategory: subcategory || '–û–±—â–∏–µ',
                        text: text,
                        is_universal: true,
                        source_url: url,
                        created_at: DateTime.now().toISO()
                    };
                    promises.push(collection.insertOne(doc));
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${text.slice(0, 50)}...`);
                }
            });

            await Promise.all(promises);
            await new Promise(resolve => setTimeout(resolve, 1500)); // –ó–∞–¥–µ—Ä–∂–∫–∞

        } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}: ${error.message}`);
            if (error.response?.status === 404) break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç
        }
    }
}

async function getSubcategories(categoryName, categoryPath, maxPages = 3) {
    const categoryUrl = BASE_DOMAIN + categoryPath;
    console.log(`üîç –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryName} (${categoryUrl})`);

    try {
        const response = await axios.get(categoryUrl, {
            headers,
            responseType: 'arraybuffer'
        });

        const html = iconv.decode(response.data, 'win1251');
        const $ = cheerio.load(html);

        // –ò—â–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–∫–ª—é—á–∞—è –≥–µ–Ω–¥–µ—Ä–Ω—ã–µ
        const subcategoryLinks = $("ul.subcategories a").filter((i, el) => {
            const text = $(el).text().toLowerCase();
            return !text.includes('–º—É–∂—á–∏–Ω') &&
                   !text.includes('–∂–µ–Ω—â–∏–Ω') &&
                   !text.includes('–ø–∞—Ä–Ω—é') &&
                   !text.includes('–¥–µ–≤—É—à–∫–µ');
        });

        if (subcategoryLinks.length > 0) {
            console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategoryLinks.length}`);
            subcategoryLinks.each((index, link) => {
                const name = $(link).text().trim();
                const href = $(link).attr("href");
                const fullUrl = BASE_DOMAIN + href;
                parseCongratulations(categoryName, name, fullUrl, maxPages);
            });
        } else {
            console.log("‚ÑπÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
            parseCongratulations(categoryName, null, categoryUrl, maxPages);
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}: ${error.message}`);
    }
}

// üèÅ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function runParser() {
    try {
        await client.connect();
        console.log("‚úîÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB");

        for (const [categoryName, categoryPath] of Object.entries(CATEGORIES)) {
            await getSubcategories(categoryName, categoryPath, 3);
        }

    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        await client.close();
        console.log("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB");
    }
}

runParser();